name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: talk-ecr
  ECS_SERVICE: talk-tf
  ECS_CLUSTER: talk-tf
  ECS_TASK_DEFINITION_FAMILY: talk-1337-app-service
  CONTAINER_NAME: talk-1337-app-container

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

  
    - name: Set environment variables
      run: |
        echo "PG_URL=${{ secrets.PG_URL }}" >> $GITHUB_ENV
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> $GITHUB_ENV

    - name: Create CloudWatch log group if not exists
      run: |
        aws logs describe-log-groups --log-group-name-prefix "/ecs/talk-1337-app-service" --region ${{ env.AWS_REGION }} || \
        aws logs create-log-group --log-group-name "/ecs/talk-1337-app-service" --region ${{ env.AWS_REGION }}

    - name: Update task definition with new image
      id: update-task-def
      run: |
        # Fetch the existing task definition
        TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --region ${{ env.AWS_REGION }} | jq '.taskDefinition')
        echo "Original Task Definition: $TASK_DEFINITION"

        # Update the task definition with the new image, log configuration, and environment variable
        NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "248184751550.dkr.ecr.us-east-1.amazonaws.com/talk-ecr:latest" --arg PG_URL "${{ secrets.PG_URL }}" \
          '.containerDefinitions[0].image = $IMAGE |
           .containerDefinitions[0].logConfiguration = {
             logDriver: "awslogs",
             options: {
               "awslogs-group": "/ecs/talk-1337-app-service",
               "awslogs-region": "us-east-1",
               "awslogs-stream-prefix": "ecs"
             }
           } |
           .containerDefinitions[0].environment += [{"name": "PG_URL", "value": $PG_URL}, {"name": "REDIS_URL", "value": $REDIS_URL}] |
           del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)')
        
        NEW_TASK_DEF_JSON=$(echo $NEW_TASK_DEF | jq -r 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .deregisteredAt)')
        echo "Updated Task Definition: $NEW_TASK_DEF_JSON"

        # Save the new task definition to a file and register it
        echo "$NEW_TASK_DEF_JSON" > new-task-def.json
        cat new-task-def.json  # For debugging
        aws ecs register-task-definition --cli-input-json file://new-task-def.json --region ${{ env.AWS_REGION }}

    - name: Get new task definition ARN
      id: get-new-task-def-arn
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs list-task-definitions --family-prefix ${{ env.ECS_TASK_DEFINITION_FAMILY }} --region ${{ env.AWS_REGION }} --sort DESC | jq -r '.taskDefinitionArns[0]')
        echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
        echo "New task definition ARN: $NEW_TASK_DEF_ARN"

    - name: Update ECS service with new task definition
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --task-definition ${{ env.NEW_TASK_DEF_ARN }} --region ${{ env.AWS_REGION }}

    - name: Force new deployment
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --region ${{ env.AWS_REGION }}
